#!/usr/bin/env ruby

require 'shellwords'

EMACS = 'emacs'
EMACSCLIENT = 'emacsclient'

RC_DIR = File.expand_path('..', File.dirname(__FILE__))
SERVERS_DIR = "#{RC_DIR}/servers"

class App
  def run(args)
    args = parse_args(args)

    ENV['G_START_DIR'] = Dir.pwd

    path = args.last and
      path = File.expand_path(prune_prefix(path))

    candidates =
      if path.nil?
        []
      else
        Dir["#{SERVERS_DIR}/server-*"].select do |server_path|
          pid = File.basename(server_path)[/\d+/]
          roots = File.readlines(server_path).map { |root| File.expand_path(root.chomp) }
          pid && pid_live?(pid) && roots.any? { |r| path == r || path.start_with?("#{r}/") }
        end
      end

    if candidates.empty?
      sh EMACS, '--debug-init', *args, background: true
    else
      sh EMACSCLIENT, '-n', '-s', File.basename(candidates[0]), *args
    end
  end

  def prune_prefix(path)
    return nil if path.nil?
    # Remove a/ or b/ prefix, because I often paste paths from git diffs.
    if !File.exist?(path)
      path.sub!(%r'\A[ab]/', '')
    end
    path
  end

  def parse_args(args)
    result = []
    args.each do |arg|
      if arg.start_with?('+')
        result << arg
      elsif arg =~ /\A(.+):(\d+)\z/
        result << "+#$2" << $1
      else
        result << arg
      end
    end
    return result
  end

  def pid_live?(pid)
    Process.kill(0, pid.to_i)
    true
  rescue Errno::ESRCH
    false
  rescue Errno::EPERM
    true
  end

  def sh(*command, background: false)
    STDERR.puts "++ #{command.shelljoin}#{' &' if background}"
    if background
      process = fork do
        exec *command
      end
      Process.detach(process)
    else
      system *command
    end
  end
end

App.new.run(ARGV)
